# [Chapter 2] 스프링부트 Cortroller

### 10. 기본 동작방식 이해하기

컨트롤러란? (FrontContreller와 Dispatcher)

1) 요청을 할 때마다 Java 파일이 호출된다.

2) 요청의 종류가 3개이면 3개의 Java 파일이 필요하다.

3) 하나의 Java 파일에서 모든 요청을 받는 FrontController 사용.

4) 너무 많은 요청이 한곳으로 모이는 것을 방지하기 위해 도메인 별로 분기

5) 분기의 일은 Dispatcher가 해준다. (ServletDispatcher, RequestDispatcher)

서블릿: 자바로 웹을 할 수 있는 기술)

도메인: 남자, 여자 (범주를 주는 기술)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/25ee549f-2b40-4e31-be95-ed55f2af5c42/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/cd2de076-30b8-4e0f-9769-a3327fa2cda8/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/b0d31f47-ee51-4f0c-87de-3b766a1a6864/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/1aeec452-cd95-4009-a787-bd76b2213668/Untitled.png)

### 11. http 4가지 요청 방식

클라이언트가 웹서버에 요청!!

웹서버는 DB에 SELECT, INSERT, UPDATE, DELETE 요청을 해서 응답!!

(1) GET(동사) - 데이터 요청

(2) POST(동사) - 데이터 전송

(3) PUT(동사) - 데이터 갱신

(4) DELETE(동사) - 데이터 삭제

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/8419d9c6-abb1-41de-819b-15c1692a100e/Untitled.png)

spring boot devetool 라이브러리: 저장하는 순간 리로드

spring boot 라이브러리: @RestController 같은 라이브러리

com.cos.controller.demo.web.HttpController.java

```java
package com.cos.controller.demo.web;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RestController;

//@Controller // File을 응답하는 컨트롤러 (클라이언트가 브라우저면 .html 파일을)
@RestController // Data를 응답하는 컨트롤러 (클라이언트가 핸드폰이면 data)
public class HttpController {

	// http://localhost:8080/get
	@GetMapping("/get")
	public String get() {
		return "<h1>get요청됨</h1>";
	}
	
	// http://localhost:8080/post
	@PostMapping("/post")
	public String post() {
		return "post요청됨";
	}
	
	// http://localhost:8080/put
	@PutMapping("/put")
	public String put() {
		return "put요청됨";
	}
	
	// http://localhost:8080/delete
	@DeleteMapping("/delete")
	public String delete() {
		return "delete요청됨";
	}
}
```

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/01a06cb8-5d97-4cf1-b880-dc5b60b7b9a2/Untitled.png)

웹 브라우저는 get만 가능 그래서 postman 사용

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/56fcd925-109c-4552-b36e-3f447583b816/Untitled.png)

### 12. 쿼리스트링, 주소변수매핑

http 쿼리 스트링(querystring), 주소 변수 매핑(path variable)

1) 구체적인 데이터 요청시에 쿼리스트링이나 주소변수매핑이 필요하다.

2) 스프링부트에서는 주소변수매핑을 주로 사용한다. 훨씬 편리하다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/7d292efc-73a7-47d1-974d-cda5820390c6/Untitled.png)

?type=양념 → 쿼리스트링

/양념 → 주소 변수 매핑

com.cos.controller.demo.web.QueryPathController.java

```java
package com.cos.controller.demo.web;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class QueryPathController {

	@GetMapping("/chicken")
	public String chickenQuery(String type) {
		return type+" 배달갑니다.(쿼리스트링)";
	}
	
	@GetMapping("/chicken/{type}")
	public String chickenPath(@PathVariable String type) {
		return type+" 배달갑니다.(주소 변수 매핑)";
	}
	
}
```

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/86d044a2-b33f-4063-9e89-e2a419ace62f/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/d14f1b9a-42ec-4296-815a-5b24874b737f/Untitled.png)

웬만하면 주소 변수 매핑으로(간편하니깐)

### 13. http body 데이터 전송하기

- http header의 Content-Type 이해

- 스프링부트는 기본적으로 x-www-form-urlencoded 타입을 파싱(분석)해준다.
- x-www-form-urlencoded
- text/plain
- application/json

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/1df8e939-fb53-4bbe-9467-4f308fdd54ef/Untitled.png)

com.cos.controller.demo.web.HeepBodyController.java

```java
package com.cos.controller.demo.web;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.cos.controller.demo.web.domain.User;

@RestController
public class HttpBodyController {
		
	private static final Logger log = LoggerFactory.getLogger(HttpBodyController.class);

	@PostMapping("/body1")
	public String xwwwformmurlencoded(String username) {
		log.info(username);
		return "key=value 전송옴";
	}
	
	@PostMapping("/body2")
	public String plaintext(@RequestBody String data) { // 평문: 안녕
		log.info(data);
		return "plain/text 전송옴";
	}
	
	@PostMapping("/body3")
	public String applicationjson(@RequestBody String data) { 
		log.info(data);
		return "json 전송옴";
	}
	
	@PostMapping("/body4")
	public String applicationjsonToObject(@RequestBody User user) { 
		log.info(user.getUsername());
		return "json 전송옴";
	}
}
```

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/c208ae14-f583-44f5-9eaa-66db756019e3/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/d88e7d2a-83c7-4f35-94dc-0069b46a1aad/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/1aef0632-1038-40c5-9dcd-a9de71e6b853/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/f2ef3644-b611-4f6e-a42e-033c2523fbab/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/e751ba54-7329-47ed-ac98-94a4d7f574a3/Untitled.png)

com.cos.controller.demo.web.domain.User.java

```java
package com.cos.controller.demo.web.domain;

public class User {
	private String username;

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}
	
}
```

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/f0cd7723-a137-460e-b4d7-6f8a4b2e4845/Untitled.png)

### 14. JSON 응답하기

http 요청을 json으로 응답하기

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/da749b4d-5e5a-4a21-b6a7-ef0e9c60e553/Untitled.png)

com.cos.controller.demo.web.HttpResponseJsonController.java

```java
package com.cos.controller.demo.web;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cos.controller.demo.web.domain.User;

@RestController
public class HttpResponseJsonController {

	@GetMapping("/resp/json")
	public String respJson() {
		return "{\"username\":\"cos\"}";
	}
	
	@GetMapping("/resp/json/object")
	public String respJsonObject() {
		User user = new User();
		user.setUsername("홍길동");
		
		String data = "{\"username\":\""+user.getUsername()+"\"}"; // 내가 Json으로 만든것은 미친짓
		return data;
	}
	
	@GetMapping("/resp/json/javaobject")
	public User respJsonJavaObject() {
		User user = new User();
		user.setUsername("홍길동");
		
		return user; // 1. MessageConverter가 자동으로 JavaObject를 Json(구:xml)으로 변경해서 통신을 통해 응답을 해준다.
					       // 2. @RestController 일때만 MessageConverter가 작동한다.
	}
}
```

### 15. HTML 응답

http 요청을 file로 응답하기

1) .txt 파일 응답하기 (기본경로는 resources/static)

2) 스프링부트가 지원하는 .mustache 파일 응답하기

3) 스프링부트가 버린 .jsp 파일 응답하기

.jsp와 .mustache 파일은 템플릿 엔진을 가지고 있다.

템플릿 엔진이란 html 파일에 java 코드를 쓸 수 있는 친구들이다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/e661a953-a21c-4833-b794-f341bcde4c03/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/150e6c6d-cc2c-403b-a5c1-04c9598101ce/Untitled.png)

pom.xml 추가 (mvnrepository.com)

```java
<!--
		https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-mustache -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mustache</artifactId>
		</dependency>
```

b.mustache 추가

static → other → b.html → b.mustache로 확장자 수정 → templates로 옮김 

```java
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>This is mustache</h1>
</body>
</html>
```

이제 jsp 차례(jasper)

pow.xml에 mustache 주석, jsp 추가

```java
<!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-jasper -->
<dependency>
    <groupId>org.apache.tomcat</groupId>
    <artifactId>tomcat-jasper</artifactId>
    <version>11.0.0-M16</version>
</dependency>
```

src/main/webapp/WEB-INF/views/c.jsp

```java
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>This is JSP</h1>
</body>
</html>
```

src/main/resources/application.yml으로 수정

```java
spring:
  mvc:
    view:
      prefix: /WEB-INF/views/
      suffix: .jsp
```

com.cos.controller.demo.web.java

```java
package com.cos.controller.demo.web;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller // 파일을 리턴할 것이기 때문
public class HttpRespController {
	
	@GetMapping("/txt")
	public String txt() {
		return "a.txt"; // 프레임워크 사용 (틀이 이미 정해져 있음)-일반 정적 파일들은 resources/static 폴더 내부에 두면 디폴트 경로이다.
		
	}
	
	@GetMapping("/mus")
	public String mus() {
		return "b"; // 머스태치 템플릿 엔진 라이브러리 등록 완료-templates 폴더 안에 .mustache을 나두면 확장자 없이 파일명만 적으면
					// 자동으로 찾아감.
	}

	@GetMapping("/jsp")
	public String jsp() {
		return "c"; // jsp 엔진 사용: src/main/webapp 폴더가 디폴트 경로!!
					// /WEB-INF/views/c.jsp (ViewResolver)
	}
	
	
}
```

### 16. JSP파일에 Java 코드 사용해보기

- java 코드 사용
- model 사용

JavaToJspController.java

```java
package com.cos.controller.demo.web;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import com.cos.controller.demo.web.domain.User;

@Controller
public class JavaToJspController {

	@GetMapping("/jsp/java")
	public String jspToJava() {
		return "d";
	}
	
	@GetMapping("/jsp/java/model")
	public String jspToJavaToMedel(Model model) { // 함수의 파라미터에 Model을 선언하고
		
		User user = new User();
		user.setUsername("ssar");
		model.addAttribute("username", user.getUsername()); // addAttribute 함수로 전달만 하면 됨
		
		return "e";
	}
	
}
```

d.jsp

```java
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>This is d.</h1>
<%
	int num = 10;
%>
<h3> num의 값은 <%=num %></h3>
</body>
</html>
```

e.jsp

```java
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>This is e</h1>
<h3>${username}</h3>
</body>
</html>
```

### 17. HTTP 요청 재분배하기(redirection)

- http 상태코드 300번대
- 다른 주소로 요청을 분배한다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/544dac62-c063-4ba7-97db-83a9560348f0/Untitled.png)

HttpRedirectionController.java

```java
package com.cos.controller.demo.web;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HttpRedirectionController {

	@GetMapping("/home")
	public String home() {
		// 1만줄 코드 가정
		return "home";
	}
	
	@GetMapping("/away")
	public String away() {
		// 다른코드
		return "redirect:/home"; // 리다이렉션이 된다. (@Controller)
		
	}
}
```

### 23. 회원가입-전처리 후처리 개념잡기

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/e00a9c3a-38be-4488-bde3-8fdd7998c085/Untitled.png)

AOP: 간점(회원가입) 지향 프로그래밍 (전처리, 후처리)

### 24. 회원가입-유효성 검사하기

pom.xml 추가

```java
<!--
		https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
			<version>2.4.4</version>
		</dependency>
```

[SignupDto.java](http://SignupDto.java) 추가

```java
package com.cos.photogramstart.web.dte.auth;

import javax.validation.constraints.Max;
import javax.validation.constraints.NotBlank;

import com.cos.photogramstart.domain.user.User;

import lombok.Data;

@Data // Getter, Setter
public class SignupDto { // 통신할떄 필요한 데이터를 담아두는 오브젝트 (username,password,email,name)
	
	@Max(20)
	private String username;
	@NotBlank
	private String password;
	@NotBlank
	private String email;
	@NotBlank
	private String name;
	
	public User toEntity() {
		return User.builder()
				.username(username)
				.password(password)
				.email(email)
				.name(name)
				.build();
	}
}
```

[User.java](http://User.java) 추가

```java
package com.cos.photogramstart.domain.user;

import java.time.LocalDateTime;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PrePersist;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

// JPA - Java Persistence API (자바로 데이터를 영구적으로 저장(DB)할 수 있는 API를 제공)

@Builder
@Entity // DB에 테이블을 생성
@Data
@NoArgsConstructor // 빈 생성자
@AllArgsConstructor // 전체 생성자
public class User {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY) // 번호 증가 전략이 데이터베이스를 따라간다.
	private int id;
	
	@Column(length = 20, unique = true)
	private String username;
	
	@Column(nullable=false)
	private String password;
	
	@Column(nullable=false)
	private String name;
	
	private String website;
	private String bio; // 자기 소개
	
	@Column(nullable=false)
	private String email;
	
	private String phone;
	private String gender;
	
	private String profileImageUrl; // 작성자 사진
	private String role; // 권한
	
	private LocalDateTime createDate;
	
	@PrePersist // DB에 Insert가 되기 직전에 실행
	public void createDate() {
		this.createDate = LocalDateTime.now();
	}
}
```

[AuthController.java](http://AuthController.java) 추가

```java
package com.cos.photogramstart.web;

import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import com.cos.photogramstart.domain.user.User;
import com.cos.photogramstart.service.AuthService;
import com.cos.photogramstart.web.dte.auth.SignupDto;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor // final이 걸려있는 모든 생성자 생성 // final 필드를 DI 할때 사용
@Controller // 1. IoC 2. 파일을 리턴하는 컨트롤러
public class AuthController {

	
	private static final Logger log = LoggerFactory.getLogger(AuthController.class);

	
	private final AuthService authService;
	
//	public AuthController(AuthService authService) {
//		this.authService = authService; // 의존성 주입
//	}
	
	@GetMapping("/auth/signin")
	public String signinForm() {
		return "/auth/signin";
	}
	
	@GetMapping("/auth/signup")
	public String signupForm() {
		return "/auth/signup";
	}
	
	// 예상: 회원가입버튼 -> /auth/siginup -> /auth/signin
	// 결과: 회원가입버튼 -> 아무것도 안됨 (CSRF 토큰이 있기 때문) (정상적인 사용자인지 구분하기 위함)
	@PostMapping("/auth/signup") // 회원가입이 성공하면 로그인 페이지로
	public String signup(@Valid SignupDto signupDto, BindingResult bindingResult) { // key = value(x-www-form-urlencoded)
		log.info(signupDto.toString());
		
		if(bindingResult.hasErrors()) {
			Map<String, String> errorMap = new HashMap<>();
			
			for(FieldError error : bindingResult.getFieldErrors()) {
				errorMap.put(error.getField(),error.getDefaultMessage());
				System.out.println(error.getDefaultMessage());
			}
		}
		
		// User <- SignupDto
		User user = signupDto.toEntity();
		log.info(user.toString());
		
		User userEntity = authService.회원가입(user);
		System.out.println(userEntity);
		return "/auth/signin";
	}
}
```

### 25. 회원가입-@ResponseBody 사용하기

백쪽에서 막고 프론트쪽에서도 막아야 안전

요청에 대한 분기

@Controller 인데 @ResponseBody가 있으면 데이터를 반환

[SignupDto.java](http://SignupDto.java) 수정

```java
@Size(min=2,max=20)
@NotBlank
private String username;
```

[AuthController.java](http://AuthController.java) 수정

```java
package com.cos.photogramstart.web;

import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cos.photogramstart.domain.user.User;
import com.cos.photogramstart.service.AuthService;
import com.cos.photogramstart.web.dte.auth.SignupDto;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor // final이 걸려있는 모든 생성자 생성 // final 필드를 DI 할때 사용
@Controller // 1. IoC 2. 파일을 리턴하는 컨트롤러
public class AuthController {

	
	private static final Logger log = LoggerFactory.getLogger(AuthController.class);

	
	private final AuthService authService;
	
//	public AuthController(AuthService authService) {
//		this.authService = authService; // 의존성 주입
//	}
	
	@GetMapping("/auth/signin")
	public String signinForm() {
		return "/auth/signin";
	}
	
	@GetMapping("/auth/signup")
	public String signupForm() {
		return "/auth/signup";
	}
	
	// 예상: 회원가입버튼 -> /auth/siginup -> /auth/signin
	// 결과: 회원가입버튼 -> 아무것도 안됨 (CSRF 토큰이 있기 때문) (정상적인 사용자인지 구분하기 위함)
	@PostMapping("/auth/signup") // 회원가입이 성공하면 로그인 페이지로
	public @ResponseBody String signup(@Valid SignupDto signupDto, BindingResult bindingResult) { // key = value(x-www-form-urlencoded)
		log.info(signupDto.toString());
		
		if(bindingResult.hasErrors()) {
			Map<String, String> errorMap = new HashMap<>();
			
			for(FieldError error : bindingResult.getFieldErrors()) {
				errorMap.put(error.getField(),error.getDefaultMessage());
				System.out.println(error.getDefaultMessage());
			}
			return "오류남"; // 오류남 메시지 출력
		}else {
			// User <- SignupDto
			User user = signupDto.toEntity();
			log.info(user.toString());
			
			User userEntity = authService.회원가입(user);
			System.out.println(userEntity);
			return "/auth/signin"; // /auth/signin 메시지 출력
		}
		

	}
}
```

### 26. 회원가입-글로벌 예외처리 하기

[AuthController.java](http://AuthController.java) 추가

```java
package com.cos.photogramstart.web;

import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cos.photogramstart.domain.user.User;
import com.cos.photogramstart.handler.ex.CustomValidationException;
import com.cos.photogramstart.service.AuthService;
import com.cos.photogramstart.web.dte.auth.SignupDto;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor // final이 걸려있는 모든 생성자 생성 // final 필드를 DI 할때 사용
@Controller // 1. IoC 2. 파일을 리턴하는 컨트롤러
public class AuthController {

	
	private static final Logger log = LoggerFactory.getLogger(AuthController.class);

	
	private final AuthService authService;
	
//	public AuthController(AuthService authService) {
//		this.authService = authService; // 의존성 주입
//	}
	
	@GetMapping("/auth/signin")
	public String signinForm() {
		return "/auth/signin";
	}
	
	@GetMapping("/auth/signup")
	public String signupForm() {
		return "/auth/signup";
	}
	
	// 예상: 회원가입버튼 -> /auth/siginup -> /auth/signin
	// 결과: 회원가입버튼 -> 아무것도 안됨 (CSRF 토큰이 있기 때문) (정상적인 사용자인지 구분하기 위함)
	@PostMapping("/auth/signup") // 회원가입이 성공하면 로그인 페이지로
	public String signup(@Valid SignupDto signupDto, BindingResult bindingResult) { // key = value(x-www-form-urlencoded)
		log.info(signupDto.toString());
		
		if(bindingResult.hasErrors()) {
			Map<String, String> errorMap = new HashMap<>();
			
			for(FieldError error : bindingResult.getFieldErrors()) {
				errorMap.put(error.getField(),error.getDefaultMessage());
				System.out.println(error.getDefaultMessage());
			}
			throw new CustomValidationException("유효성 검사 실패함", errorMap);
		}else {
			// User <- SignupDto
			User user = signupDto.toEntity();
			log.info(user.toString());
			
			User userEntity = authService.회원가입(user);
			System.out.println(userEntity);
			return "/auth/signin";
		}
		

	}
}
```

com.cos.photogramstart.handler.ControllerExceptionHandler.java

```java
package com.cos.photogramstart.handler;

import java.util.Map;

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestController;

import com.cos.photogramstart.handler.ex.CustomValidationException;

@RestController // 낚아챈 데이터
@ControllerAdvice // 모든 exception을 낚아챔
public class ControllerExceptionHandler {

	@ExceptionHandler(CustomValidationException.class)
	public Map<String,String> vaildationException(CustomValidationException e) {
		return e.getErrorMap();
	}
}
```

com.cos.photogramstart.handler.ex.CustomValidationException.java

```java
package com.cos.photogramstart.handler.ex;

import java.util.Map;

public class CustomValidationException extends RuntimeException{
	
	// 객체를 구분할 때
	private static final long serialVersionUID = 1L;
	
	private Map<String, String> errorMap;
	
	public CustomValidationException(String message, Map<String, String> errorMap) {
		super(message);
		this.errorMap = errorMap;
	}
	
	public Map<String,String> getErrorMap() {
		return errorMap;
	}

}
```

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/47c9e36e-7c3a-4196-9979-908053d8a766/Untitled.png)

### 27. 회원가입-공통 응답 DTO 만들기

com.cos.photogramstart.web.dto.CMRespDto.java

```java
package com.cos.photogramstart.web.dto;

import java.util.Map;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class CMRespDto<T> {
	private int code; // 1(성공), -1(실패)
	private String message;
	private T data;
	
}
```

ControllerExceptionHandler.java

```java
package com.cos.photogramstart.handler;

import java.util.Map;

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestController;

import com.cos.photogramstart.handler.ex.CustomValidationException;
import com.cos.photogramstart.web.dto.CMRespDto;

@RestController // 낚아챈 데이터
@ControllerAdvice // 모든 exception을 낚아챔
public class ControllerExceptionHandler {

	@ExceptionHandler(CustomValidationException.class)
	public CMRespDto<?> vaildationException(CustomValidationException e) {
		return new CMRespDto<Map<String,String>>(-1,e.getMessage(),e.getErrorMap());
	}
}
```

### 28. 회원가입-공통 응답 Script 만들기

com.cos.photogramstart.util.Script.java

```java
package com.cos.photogramstart.util;

public class Script {

	public static String back(String msg) {
		StringBuffer sb = new StringBuffer();
		sb.append("<script>");
		sb.append("alert('"+msg+"');"); // 경고창 뛰우고
		sb.append("history.back();"); // 뒤로 돌아감
		sb.append("</script>");
		return sb.toString();
	}
}
```

ControllerExceptionHandler.java

```java
package com.cos.photogramstart.handler;

import java.util.Map;

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestController;

import com.cos.photogramstart.handler.ex.CustomValidationException;
import com.cos.photogramstart.util.Script;
import com.cos.photogramstart.web.dto.CMRespDto;

@RestController // 낚아챈 데이터
@ControllerAdvice // 모든 exception을 낚아챔
public class ControllerExceptionHandler {

	@ExceptionHandler(CustomValidationException.class)
	public String vaildationException(CustomValidationException e) {
		// CMRespDto, Script 비교
		// 1.클라이언트에게 응답할때는 Script 좋음
		// 2.Ajax통신 - CMRespDto
		// 3.Android통신 - CMRespDto
		return Script.back(e.getErrorMap().toString());
		//return new CMRespDto<Map<String,String>>(-1,e.getMessage(),e.getErrorMap());
	}
}
```

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/939d504d-4d23-4d70-9be0-1a628feb8af7/4439489b-a632-4b8a-bf1b-c132fb916b14/Untitled.png)

확인 누르면 다시 로그인 창으로
